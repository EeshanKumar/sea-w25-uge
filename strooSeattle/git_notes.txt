Git is a version control system.

It is often called a dVCS (because it’s a distributed VCS).

GitHub is an online interface for git users to post their projects, collaborate, and socialize.

Git is for nerds.

git add <file> Adds any changes inside <file> to the staging area

git commit -m '<message>' Commits the staging area to the repository with a <message>


When you’re trying to produce a manual on a git sub-command, use the dash between “git” and the subcommand. Example: $ man git-config

5 pieces of a commit:
1. Message
2. ID
3. Timestamp
4. Diff (changes)
5. Signature


Commands                                | Action
----------------------------------------|----------------------------------------------------------------
git init                                | Initialize a git repo
git status                              | Displays the current state of the project
git add filename                        | Adds that file to the staging area and starts tracking changes
git add '*.txt'                         | Adds all text files to the staging area
git commit -m "Commit message"          | Commits (stores) changes with the commit message
git log                                 | Shows your commit history
git remote add RemoteName RemoteUrl     | Adds a remote location for local repo to remote name at repo url
git push -u RemoteName BranchName       | Pushes local changes to remote repo; -u tells Git to remember the parameters so that next time we can simply run git push
git push                                | Pushes the local changes to the remote repo you previously specified with git push -u RemoteName BranchName
git pull RemoteName BranchName          | Gets changes made to the specified branch of our remote repo
git diff HEAD                           | View the differences pulled from the remote branch compared to our most recent commit (HEAD)
git diff --staged                       | View the changes you just staged
git reset filename                      | Unstages the specified file(s)
git checkout -- targetfile              | Get rid of all changes since the last commit for the targetfile
git branch NewBranchName                | Creates a branch with the specified name
git branch                              | Displays all branches and current working branch
git checkout NewBranchName              | Switches to the specified branch
git rm '*.txt'                          | Removes the files from disk and stages the removal of the files
git merge NewBranchName                 | Merges the specified branch name into the branch you're currently working on
git branch -d NewBranchName             | Deletes the specified branch
                                        |